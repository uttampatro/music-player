[{"/home/uttam/react-player/src/index.js":"1","/home/uttam/react-player/src/App.js":"2","/home/uttam/react-player/src/components/Player.js":"3","/home/uttam/react-player/src/components/Song.js":"4","/home/uttam/react-player/src/components/Library.js":"5","/home/uttam/react-player/src/components/LibrarySong.js":"6","/home/uttam/react-player/src/components/Nav.js":"7","/home/uttam/react-player/src/data.js":"8","/home/uttam/react-player/src/reportWebVitals.js":"9"},{"size":480,"mtime":1608551379936,"results":"10","hashOfConfig":"11"},{"size":2155,"mtime":1608819429949,"results":"12","hashOfConfig":"11"},{"size":3350,"mtime":1608817551778,"results":"13","hashOfConfig":"11"},{"size":320,"mtime":1608715302409,"results":"14","hashOfConfig":"11"},{"size":925,"mtime":1608794189163,"results":"15","hashOfConfig":"11"},{"size":1184,"mtime":1608816718614,"results":"16","hashOfConfig":"11"},{"size":469,"mtime":1608793886578,"results":"17","hashOfConfig":"11"},{"size":2843,"mtime":1608797690034,"results":"18","hashOfConfig":"11"},{"size":385,"mtime":1608817477057,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"18jczl7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/uttam/react-player/src/index.js",[],["41","42"],"/home/uttam/react-player/src/App.js",[],"/home/uttam/react-player/src/components/Player.js",["43"],"import React, {useEffect} from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\n// import { playAudio } from \"../util\";\n\nconst Player = ({\n    audioRef, \n    currentSong, \n    isPlaying, \n    setIsPlaying, \n    songInfo, \n    setSongInfo, \n    songs, \n    setCurrentSong,\n    setSongs \n}) => {\n    //useEffect\n    useEffect(() =>{\n        //add active song\n        const newSongs = songs.map((song) => {\n            if(song.id === currentSong.id) {\n                return {\n                    ...song,\n                    active: true,\n                };\n            }else{\n                return {\n                    ...song,\n                    active: false,\n                };\n            }\n        });\n        setSongs(newSongs);\n    }, [currentSong])\n   //event handler  \n    const playSongHandler = () => {\n        if (isPlaying) {\n            audioRef.current.pause();\n            setIsPlaying(!isPlaying);\n        }else{\n            audioRef.current.play();\n            setIsPlaying(!isPlaying);\n        }\n    };\n     \n    const getTime = (time) => {\n        return (\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n        );\n    }\n    const dragHandler = (e) => {\n        audioRef.current.currentTime = e.target.value;\n        setSongInfo({...songInfo, currentTime: e.target.value});\n    }\n    const skipTrackHandler = async (direction) => {\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n        if(direction === 'skip-forward'){\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n        }\n        if (direction === 'skip-back') {\n            if((currentIndex - 1) % songs.length === -1) {\n                await setCurrentSong(songs[songs.length -1]);\n                if(isPlaying) audioRef.current.play();\n                return;\n            }\n            await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n        }\n        if(isPlaying) audioRef.current.play();\n    };\n \n    return (\n        <div className = \"player\">\n            <div className=\"time-control\">\n                <p>{getTime(songInfo.currentTime)}</p>\n                \n                <input \n                min = {0} \n                max = {songInfo.duration || 0} \n                value = {songInfo.currentTime} \n                onChange = {dragHandler}\n                type=\"range\"/>\n\n                <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\n            </div>\n            <div className=\"play-control\">\n                <FontAwesomeIcon \n                onClick = {() => skipTrackHandler(\"skip-back\") } \n                className = \"skip-back\" \n                size = \"2x\" \n                icon = {faAngleLeft}/>\n                <FontAwesomeIcon \n                onClick = {playSongHandler} \n                className = \"play\" \n                size = \"2x\" \n                icon = {isPlaying ? faPause : faPlay }/>\n                <FontAwesomeIcon \n                onClick = {() => skipTrackHandler(\"skip-forward\") } \n                className = \"skip-forward\" \n                size = \"2x\" \n                icon = {faAngleRight}/>\n            </div>\n             \n        </div>\n    );\n}\n\nexport default Player;","/home/uttam/react-player/src/components/Song.js",[],"/home/uttam/react-player/src/components/Library.js",["44"],"import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport React from \"react\";\nimport LibrarySong from \"./LibrarySong\";\n\nconst Library = ({ songs, setCurrentSong, audioRef, isPlaying, setSongs, libraryStatus }) => {\n    return(\n        <div className = {`library ${libraryStatus ? \"active-library\" : \"\"}`}>\n            <h2>Library</h2>\n            <div className=\"library-songs\">\n                {songs.map(song => (\n                    <LibrarySong \n                        songs = {songs} \n                        setCurrentSong = {setCurrentSong} \n                        song = {song}\n                        id = {song.id}\n                        key = {song.id}\n                        audioRef = {audioRef}\n                        isPlaying = {isPlaying}\n                        setSongs = {setSongs}\n                    />\n                ))}\n            </div>\n        </div>\n    )\n}\nexport default Library;","/home/uttam/react-player/src/components/LibrarySong.js",[],"/home/uttam/react-player/src/components/Nav.js",[],"/home/uttam/react-player/src/data.js",[],"/home/uttam/react-player/src/reportWebVitals.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":34,"column":8,"nodeType":"51","endLine":34,"endColumn":21,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":17},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setSongs' and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["59"],"no-unused-vars","'library' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [currentSong, setSongs, songs]",{"range":"62","text":"63"},[866,879],"[currentSong, setSongs, songs]"]